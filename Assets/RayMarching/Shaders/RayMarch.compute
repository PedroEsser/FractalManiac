#pragma kernel CSMain
#include "Assets/RayMarching/Shaders/Globals.hlsl"
#include "Assets/RayMarching/Shaders/Fractal_SDFs.hlsl"
#include "Assets/RayMarching/Shaders/Player.hlsl"

RWTexture2D<float4> Result;

float playerClipSDF(float3 pos)
{
    return sphere_sdf(pos - _PlayerPos, 10 * _PlayerSize);
}

float sceneSDF(float3 pos)
{
    /*float fractal_dist = mandelbulbSDF(pos, 40);
    if(fractal_dist < -Debug.x){
        fractal_dist = -fractal_dist - 2 * Debug.x;
    }*/
    float fractal_dist = mengerSpongeSDF(pos, 5);
    float dist_scene = max(fractal_dist, -playerClipSDF(pos) * Debug.y);
    return dist_scene;
    //return fractal_dist;
}

float4 RayMarchScene(float3 rayOrigin, float3 rayDir)
{
    float totalDist = 0.0;

    for (int i = 0; i < MAX_STEPS; i++)
    {
        float3 pos = rayOrigin + rayDir * totalDist;
        float dist = sceneSDF(pos);

        if (dist < EPSILON){
            return float4(pos, totalDist);
        }

        totalDist += dist;
        if (totalDist > MAX_DIST)
            return float4(0, 0, 0, INFINITY);
    }

    return float4(0, 0, 0, INFINITY);
}

float ShadowAt(float3 pos)
{
    float3 rayOrigin = pos + -_LightDirection * 50;
    float4 sceneHitInfo = RayMarchScene(rayOrigin, _LightDirection);
    if(sceneHitInfo.w != INFINITY && length(sceneHitInfo.xyz - pos) < 0.01){
        return 1;
    }
    return 0.5;
}

float3 sceneColorAt(float4 sceneHitInfo)
{
    if(sceneHitInfo.w == INFINITY){
        return float3(0, 0, 0);
    }

    float distAttenuation = 1 / (1 + sceneHitInfo.w * Debug.z);
    return float3(1, .75, .5) * ShadowAt(sceneHitInfo.xyz) * distAttenuation;
}

float3 playerColorAt(float4 playerHitInfo)
{
    float3 p = normalize(playerHitInfo.xyz - _PlayerPos);
    float u = atan2(p.z, p.x) / (2.0 * PI) + 0.5;
    float v = p.y * 0.5 + 0.5;
    float2 uv = float2(u, v);
    int2 texSize = int2(0, 0); // width, height
    SpaceshipTex.GetDimensions(texSize.x, texSize.y);
    int2 texel = int2(uv * float2(texSize - 1));
    float3 playerColor = SpaceshipTex.Load(int3(texel, 0)).rgb;
    return playerColor;
}

float3 CalculateColor(float3 rayOrigin, float3 rayDir)
{
    float4 playerHitInfo = RaySphereIntersection(rayOrigin, rayDir, _PlayerPos, _PlayerSize);
    float4 sceneHitInfo = RayMarchScene(rayOrigin, rayDir);
    if(playerHitInfo.w != INFINITY){
        if(playerHitInfo.w < sceneHitInfo.w){
            return playerColorAt(playerHitInfo);
        }

        float3 sceneColor = sceneColorAt(sceneHitInfo);
        return (sceneColor + playerColorAt(playerHitInfo)) * 0.5;
    }
    return sceneColorAt(sceneHitInfo);
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float2 resolution = _ScreenParams.xy;
    float2 uv = (id.xy / resolution) * 2.0 - 1.0;
    uv.x *= resolution.x / resolution.y;

    // reconstruct view ray in world space
    float4 rayCam = mul(_CameraInverseProjection, float4(uv, 1, 1));
    rayCam /= rayCam.w;

    float3 rayDir = normalize(mul((float3x3)_CameraToWorld, rayCam.xyz));
    float3 rayOrigin = _CameraWorldPos;

    float3 color = CalculateColor(rayOrigin, rayDir);
    Result[id.xy] = float4(color, 1.0);
}
