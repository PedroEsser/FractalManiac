#pragma kernel CSMain
#include "Assets/RayMarching/Shaders/Fractal_SDFs.hlsl"
#include "Assets/RayMarching/Shaders/Player.hlsl"

#define MAX_STEPS 300
#define MAX_DIST 100.0
#define EPSILON 0.00001

RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float3 _CameraWorldPos;
float4 _ScreenParams;
float3 _PlayerPos;
float _PlayerSize;
float4 Debug;

float playerClipSDF(float3 pos)
{
    return sphere_sdf(pos - _PlayerPos, 10 * _PlayerSize);
}

float sceneSDF(float3 pos)
{
    /*float fractal_dist = mandelbulbSDF(pos, 40);
    if(fractal_dist < -Debug.x){
        fractal_dist = -fractal_dist - 2 * Debug.x;
    }*/
    float fractal_dist = mengerSpongeSDF(pos, 8);
    float dist_scene = max(fractal_dist, -playerClipSDF(pos) * Debug.y);
    return dist_scene;
    //return fractal_dist;
}

float3 RayMarchScene(float3 rayOrigin, float3 rayDir)
{
    if(RaySphereIntersect(rayOrigin, rayDir, _PlayerPos, _PlayerSize)){
        return float3(1, 1, 0);
    }
    float totalDist = 0.0;

    for (int i = 0; i < MAX_STEPS; i++)
    {
        float3 pos = rayOrigin + rayDir * totalDist;
        float dist = sceneSDF(pos);

        if (dist < EPSILON){
            return float3(1, 1, 1) * exp(-totalDist * Debug.z);
        }

        totalDist += dist;
        if (totalDist > MAX_DIST)
            break;
    }

    return float3(0, 0, 0);
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float2 resolution = _ScreenParams.xy;
    float2 uv = (id.xy / resolution) * 2.0 - 1.0;
    uv.x *= resolution.x / resolution.y;

    // reconstruct view ray in world space
    float4 rayCam = mul(_CameraInverseProjection, float4(uv, 1, 1));
    rayCam /= rayCam.w;

    float3 rayDir = normalize(mul((float3x3)_CameraToWorld, rayCam.xyz));
    float3 rayOrigin = _CameraWorldPos;

    float3 color = RayMarchScene(rayOrigin, rayDir);
    Result[id.xy] = float4(color, 1.0);
}
